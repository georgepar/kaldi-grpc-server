// source: protos/asr.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.ilsp.spmd.asr.AudioEncoding', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.RecognitionConfig', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.RecognizeRequest', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.RecognizeResponse', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.SpeechRecognitionAlternative', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.SpeechRecognitionResult', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.StreamingRecognitionConfig', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.StreamingRecognitionResult', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.StreamingRecognizeRequest', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.StreamingRecognizeRequest.StreamingRequestCase', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.StreamingRecognizeResponse', null, global);
goog.exportSymbol('proto.ilsp.spmd.asr.WordInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.RecognizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ilsp.spmd.asr.RecognizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.RecognizeRequest.displayName = 'proto.ilsp.spmd.asr.RecognizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ilsp.spmd.asr.StreamingRecognizeRequest.oneofGroups_);
};
goog.inherits(proto.ilsp.spmd.asr.StreamingRecognizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.StreamingRecognizeRequest.displayName = 'proto.ilsp.spmd.asr.StreamingRecognizeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.RecognitionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ilsp.spmd.asr.RecognitionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.RecognitionConfig.displayName = 'proto.ilsp.spmd.asr.RecognitionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ilsp.spmd.asr.StreamingRecognitionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.StreamingRecognitionConfig.displayName = 'proto.ilsp.spmd.asr.StreamingRecognitionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.RecognizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ilsp.spmd.asr.RecognizeResponse.repeatedFields_, null);
};
goog.inherits(proto.ilsp.spmd.asr.RecognizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.RecognizeResponse.displayName = 'proto.ilsp.spmd.asr.RecognizeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ilsp.spmd.asr.SpeechRecognitionResult.repeatedFields_, null);
};
goog.inherits(proto.ilsp.spmd.asr.SpeechRecognitionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.SpeechRecognitionResult.displayName = 'proto.ilsp.spmd.asr.SpeechRecognitionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ilsp.spmd.asr.SpeechRecognitionAlternative.repeatedFields_, null);
};
goog.inherits(proto.ilsp.spmd.asr.SpeechRecognitionAlternative, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.SpeechRecognitionAlternative.displayName = 'proto.ilsp.spmd.asr.SpeechRecognitionAlternative';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.WordInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ilsp.spmd.asr.WordInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.WordInfo.displayName = 'proto.ilsp.spmd.asr.WordInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ilsp.spmd.asr.StreamingRecognizeResponse.repeatedFields_, null);
};
goog.inherits(proto.ilsp.spmd.asr.StreamingRecognizeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.StreamingRecognizeResponse.displayName = 'proto.ilsp.spmd.asr.StreamingRecognizeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ilsp.spmd.asr.StreamingRecognitionResult.repeatedFields_, null);
};
goog.inherits(proto.ilsp.spmd.asr.StreamingRecognitionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ilsp.spmd.asr.StreamingRecognitionResult.displayName = 'proto.ilsp.spmd.asr.StreamingRecognitionResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.RecognizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.RecognizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.RecognizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.ilsp.spmd.asr.RecognitionConfig.toObject(includeInstance, f),
    audio: msg.getAudio_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.RecognizeRequest}
 */
proto.ilsp.spmd.asr.RecognizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.RecognizeRequest;
  return proto.ilsp.spmd.asr.RecognizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.RecognizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.RecognizeRequest}
 */
proto.ilsp.spmd.asr.RecognizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ilsp.spmd.asr.RecognitionConfig;
      reader.readMessage(value,proto.ilsp.spmd.asr.RecognitionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.RecognizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.RecognizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.RecognizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ilsp.spmd.asr.RecognitionConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudio_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional RecognitionConfig config = 1;
 * @return {?proto.ilsp.spmd.asr.RecognitionConfig}
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.getConfig = function() {
  return /** @type{?proto.ilsp.spmd.asr.RecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.ilsp.spmd.asr.RecognitionConfig, 1));
};


/**
 * @param {?proto.ilsp.spmd.asr.RecognitionConfig|undefined} value
 * @return {!proto.ilsp.spmd.asr.RecognizeRequest} returns this
*/
proto.ilsp.spmd.asr.RecognizeRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ilsp.spmd.asr.RecognizeRequest} returns this
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audio = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.getAudio = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audio = 2;
 * This is a type-conversion wrapper around `getAudio()`
 * @return {string}
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.getAudio_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudio()));
};


/**
 * optional bytes audio = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudio()`
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.getAudio_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudio()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ilsp.spmd.asr.RecognizeRequest} returns this
 */
proto.ilsp.spmd.asr.RecognizeRequest.prototype.setAudio = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.StreamingRequestCase = {
  STREAMING_REQUEST_NOT_SET: 0,
  STREAMING_CONFIG: 1,
  AUDIO_CONTENT: 2
};

/**
 * @return {proto.ilsp.spmd.asr.StreamingRecognizeRequest.StreamingRequestCase}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.getStreamingRequestCase = function() {
  return /** @type {proto.ilsp.spmd.asr.StreamingRecognizeRequest.StreamingRequestCase} */(jspb.Message.computeOneofCase(this, proto.ilsp.spmd.asr.StreamingRecognizeRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.StreamingRecognizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.StreamingRecognizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamingConfig: (f = msg.getStreamingConfig()) && proto.ilsp.spmd.asr.StreamingRecognitionConfig.toObject(includeInstance, f),
    audioContent: msg.getAudioContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeRequest}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.StreamingRecognizeRequest;
  return proto.ilsp.spmd.asr.StreamingRecognizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.StreamingRecognizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeRequest}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ilsp.spmd.asr.StreamingRecognitionConfig;
      reader.readMessage(value,proto.ilsp.spmd.asr.StreamingRecognitionConfig.deserializeBinaryFromReader);
      msg.setStreamingConfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.StreamingRecognizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.StreamingRecognizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamingConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ilsp.spmd.asr.StreamingRecognitionConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional StreamingRecognitionConfig streaming_config = 1;
 * @return {?proto.ilsp.spmd.asr.StreamingRecognitionConfig}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.getStreamingConfig = function() {
  return /** @type{?proto.ilsp.spmd.asr.StreamingRecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.ilsp.spmd.asr.StreamingRecognitionConfig, 1));
};


/**
 * @param {?proto.ilsp.spmd.asr.StreamingRecognitionConfig|undefined} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeRequest} returns this
*/
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.setStreamingConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ilsp.spmd.asr.StreamingRecognizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeRequest} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.clearStreamingConfig = function() {
  return this.setStreamingConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.hasStreamingConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audio_content = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.getAudioContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audio_content = 2;
 * This is a type-conversion wrapper around `getAudioContent()`
 * @return {string}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.getAudioContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioContent()));
};


/**
 * optional bytes audio_content = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioContent()`
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.getAudioContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeRequest} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.setAudioContent = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.ilsp.spmd.asr.StreamingRecognizeRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeRequest} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.clearAudioContent = function() {
  return jspb.Message.setOneofField(this, 2, proto.ilsp.spmd.asr.StreamingRecognizeRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ilsp.spmd.asr.StreamingRecognizeRequest.prototype.hasAudioContent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.RecognitionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.RecognitionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.RecognitionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    encoding: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sampleRateHertz: jspb.Message.getFieldWithDefault(msg, 2, 0),
    languageCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    maxAlternatives: jspb.Message.getFieldWithDefault(msg, 4, 0),
    audioChannelCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    enableWordTimeOffsets: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    enableAutomaticPunctuation: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    enableSeparateRecognitionPerChannel: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    model: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig}
 */
proto.ilsp.spmd.asr.RecognitionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.RecognitionConfig;
  return proto.ilsp.spmd.asr.RecognitionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.RecognitionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig}
 */
proto.ilsp.spmd.asr.RecognitionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ilsp.spmd.asr.AudioEncoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleRateHertz(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxAlternatives(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAudioChannelCount(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableWordTimeOffsets(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableAutomaticPunctuation(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSeparateRecognitionPerChannel(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.RecognitionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.RecognitionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.RecognitionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSampleRateHertz();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMaxAlternatives();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAudioChannelCount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getEnableWordTimeOffsets();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getEnableAutomaticPunctuation();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getEnableSeparateRecognitionPerChannel();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional AudioEncoding encoding = 1;
 * @return {!proto.ilsp.spmd.asr.AudioEncoding}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getEncoding = function() {
  return /** @type {!proto.ilsp.spmd.asr.AudioEncoding} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ilsp.spmd.asr.AudioEncoding} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setEncoding = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 sample_rate_hertz = 2;
 * @return {number}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getSampleRateHertz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setSampleRateHertz = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string language_code = 3;
 * @return {string}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setLanguageCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 max_alternatives = 4;
 * @return {number}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getMaxAlternatives = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setMaxAlternatives = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 audio_channel_count = 7;
 * @return {number}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getAudioChannelCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setAudioChannelCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool enable_word_time_offsets = 8;
 * @return {boolean}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getEnableWordTimeOffsets = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setEnableWordTimeOffsets = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool enable_automatic_punctuation = 11;
 * @return {boolean}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getEnableAutomaticPunctuation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setEnableAutomaticPunctuation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool enable_separate_recognition_per_channel = 12;
 * @return {boolean}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getEnableSeparateRecognitionPerChannel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setEnableSeparateRecognitionPerChannel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string model = 13;
 * @return {string}
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ilsp.spmd.asr.RecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.RecognitionConfig.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.StreamingRecognitionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.StreamingRecognitionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.ilsp.spmd.asr.RecognitionConfig.toObject(includeInstance, f),
    interimResults: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionConfig}
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.StreamingRecognitionConfig;
  return proto.ilsp.spmd.asr.StreamingRecognitionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.StreamingRecognitionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionConfig}
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ilsp.spmd.asr.RecognitionConfig;
      reader.readMessage(value,proto.ilsp.spmd.asr.RecognitionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInterimResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.StreamingRecognitionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.StreamingRecognitionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ilsp.spmd.asr.RecognitionConfig.serializeBinaryToWriter
    );
  }
  f = message.getInterimResults();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional RecognitionConfig config = 1;
 * @return {?proto.ilsp.spmd.asr.RecognitionConfig}
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.prototype.getConfig = function() {
  return /** @type{?proto.ilsp.spmd.asr.RecognitionConfig} */ (
    jspb.Message.getWrapperField(this, proto.ilsp.spmd.asr.RecognitionConfig, 1));
};


/**
 * @param {?proto.ilsp.spmd.asr.RecognitionConfig|undefined} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionConfig} returns this
*/
proto.ilsp.spmd.asr.StreamingRecognitionConfig.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool interim_results = 2;
 * @return {boolean}
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.prototype.getInterimResults = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionConfig} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognitionConfig.prototype.setInterimResults = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ilsp.spmd.asr.RecognizeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.RecognizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.RecognizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.RecognizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.RecognizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.ilsp.spmd.asr.SpeechRecognitionResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.RecognizeResponse}
 */
proto.ilsp.spmd.asr.RecognizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.RecognizeResponse;
  return proto.ilsp.spmd.asr.RecognizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.RecognizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.RecognizeResponse}
 */
proto.ilsp.spmd.asr.RecognizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ilsp.spmd.asr.SpeechRecognitionResult;
      reader.readMessage(value,proto.ilsp.spmd.asr.SpeechRecognitionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.RecognizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.RecognizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.RecognizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.RecognizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ilsp.spmd.asr.SpeechRecognitionResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SpeechRecognitionResult results = 1;
 * @return {!Array<!proto.ilsp.spmd.asr.SpeechRecognitionResult>}
 */
proto.ilsp.spmd.asr.RecognizeResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.ilsp.spmd.asr.SpeechRecognitionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ilsp.spmd.asr.SpeechRecognitionResult, 1));
};


/**
 * @param {!Array<!proto.ilsp.spmd.asr.SpeechRecognitionResult>} value
 * @return {!proto.ilsp.spmd.asr.RecognizeResponse} returns this
*/
proto.ilsp.spmd.asr.RecognizeResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionResult}
 */
proto.ilsp.spmd.asr.RecognizeResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ilsp.spmd.asr.SpeechRecognitionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ilsp.spmd.asr.RecognizeResponse} returns this
 */
proto.ilsp.spmd.asr.RecognizeResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.SpeechRecognitionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    alternativesList: jspb.Message.toObjectList(msg.getAlternativesList(),
    proto.ilsp.spmd.asr.SpeechRecognitionAlternative.toObject, includeInstance),
    channelTag: jspb.Message.getFieldWithDefault(msg, 2, 0),
    audioProcessed: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionResult}
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.SpeechRecognitionResult;
  return proto.ilsp.spmd.asr.SpeechRecognitionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionResult}
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ilsp.spmd.asr.SpeechRecognitionAlternative;
      reader.readMessage(value,proto.ilsp.spmd.asr.SpeechRecognitionAlternative.deserializeBinaryFromReader);
      msg.addAlternatives(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelTag(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAudioProcessed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.SpeechRecognitionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlternativesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ilsp.spmd.asr.SpeechRecognitionAlternative.serializeBinaryToWriter
    );
  }
  f = message.getChannelTag();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAudioProcessed();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * repeated SpeechRecognitionAlternative alternatives = 1;
 * @return {!Array<!proto.ilsp.spmd.asr.SpeechRecognitionAlternative>}
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.getAlternativesList = function() {
  return /** @type{!Array<!proto.ilsp.spmd.asr.SpeechRecognitionAlternative>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ilsp.spmd.asr.SpeechRecognitionAlternative, 1));
};


/**
 * @param {!Array<!proto.ilsp.spmd.asr.SpeechRecognitionAlternative>} value
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionResult} returns this
*/
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.setAlternativesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative}
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.addAlternatives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ilsp.spmd.asr.SpeechRecognitionAlternative, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionResult} returns this
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.clearAlternativesList = function() {
  return this.setAlternativesList([]);
};


/**
 * optional int32 channel_tag = 2;
 * @return {number}
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.getChannelTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionResult} returns this
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.setChannelTag = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float audio_processed = 3;
 * @return {number}
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.getAudioProcessed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionResult} returns this
 */
proto.ilsp.spmd.asr.SpeechRecognitionResult.prototype.setAudioProcessed = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.SpeechRecognitionAlternative.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcript: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.ilsp.spmd.asr.WordInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative}
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.SpeechRecognitionAlternative;
  return proto.ilsp.spmd.asr.SpeechRecognitionAlternative.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative}
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscript(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 3:
      var value = new proto.ilsp.spmd.asr.WordInfo;
      reader.readMessage(value,proto.ilsp.spmd.asr.WordInfo.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.SpeechRecognitionAlternative.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ilsp.spmd.asr.WordInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transcript = 1;
 * @return {string}
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.getTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative} returns this
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.setTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float confidence = 2;
 * @return {number}
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative} returns this
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated WordInfo words = 3;
 * @return {!Array<!proto.ilsp.spmd.asr.WordInfo>}
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.ilsp.spmd.asr.WordInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ilsp.spmd.asr.WordInfo, 3));
};


/**
 * @param {!Array<!proto.ilsp.spmd.asr.WordInfo>} value
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative} returns this
*/
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ilsp.spmd.asr.WordInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ilsp.spmd.asr.WordInfo}
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ilsp.spmd.asr.WordInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative} returns this
 */
proto.ilsp.spmd.asr.SpeechRecognitionAlternative.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.WordInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.WordInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.WordInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.WordInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    word: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.WordInfo}
 */
proto.ilsp.spmd.asr.WordInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.WordInfo;
  return proto.ilsp.spmd.asr.WordInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.WordInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.WordInfo}
 */
proto.ilsp.spmd.asr.WordInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.WordInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.WordInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.WordInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.WordInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional float start_time = 1;
 * @return {number}
 */
proto.ilsp.spmd.asr.WordInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.WordInfo} returns this
 */
proto.ilsp.spmd.asr.WordInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float end_time = 2;
 * @return {number}
 */
proto.ilsp.spmd.asr.WordInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.WordInfo} returns this
 */
proto.ilsp.spmd.asr.WordInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string word = 3;
 * @return {string}
 */
proto.ilsp.spmd.asr.WordInfo.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ilsp.spmd.asr.WordInfo} returns this
 */
proto.ilsp.spmd.asr.WordInfo.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.StreamingRecognizeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.StreamingRecognizeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.ilsp.spmd.asr.StreamingRecognitionResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeResponse}
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.StreamingRecognizeResponse;
  return proto.ilsp.spmd.asr.StreamingRecognizeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.StreamingRecognizeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeResponse}
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ilsp.spmd.asr.StreamingRecognitionResult;
      reader.readMessage(value,proto.ilsp.spmd.asr.StreamingRecognitionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.StreamingRecognizeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.StreamingRecognizeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ilsp.spmd.asr.StreamingRecognitionResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StreamingRecognitionResult results = 1;
 * @return {!Array<!proto.ilsp.spmd.asr.StreamingRecognitionResult>}
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.ilsp.spmd.asr.StreamingRecognitionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ilsp.spmd.asr.StreamingRecognitionResult, 1));
};


/**
 * @param {!Array<!proto.ilsp.spmd.asr.StreamingRecognitionResult>} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeResponse} returns this
*/
proto.ilsp.spmd.asr.StreamingRecognizeResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ilsp.spmd.asr.StreamingRecognitionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionResult}
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ilsp.spmd.asr.StreamingRecognitionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognizeResponse} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognizeResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ilsp.spmd.asr.StreamingRecognitionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ilsp.spmd.asr.StreamingRecognitionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    alternativesList: jspb.Message.toObjectList(msg.getAlternativesList(),
    proto.ilsp.spmd.asr.SpeechRecognitionAlternative.toObject, includeInstance),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    channelTag: jspb.Message.getFieldWithDefault(msg, 5, 0),
    audioProcessed: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionResult}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ilsp.spmd.asr.StreamingRecognitionResult;
  return proto.ilsp.spmd.asr.StreamingRecognitionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ilsp.spmd.asr.StreamingRecognitionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionResult}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ilsp.spmd.asr.SpeechRecognitionAlternative;
      reader.readMessage(value,proto.ilsp.spmd.asr.SpeechRecognitionAlternative.deserializeBinaryFromReader);
      msg.addAlternatives(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelTag(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAudioProcessed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ilsp.spmd.asr.StreamingRecognitionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ilsp.spmd.asr.StreamingRecognitionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlternativesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ilsp.spmd.asr.SpeechRecognitionAlternative.serializeBinaryToWriter
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getChannelTag();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAudioProcessed();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * repeated SpeechRecognitionAlternative alternatives = 1;
 * @return {!Array<!proto.ilsp.spmd.asr.SpeechRecognitionAlternative>}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.getAlternativesList = function() {
  return /** @type{!Array<!proto.ilsp.spmd.asr.SpeechRecognitionAlternative>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ilsp.spmd.asr.SpeechRecognitionAlternative, 1));
};


/**
 * @param {!Array<!proto.ilsp.spmd.asr.SpeechRecognitionAlternative>} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionResult} returns this
*/
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.setAlternativesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ilsp.spmd.asr.SpeechRecognitionAlternative}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.addAlternatives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ilsp.spmd.asr.SpeechRecognitionAlternative, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionResult} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.clearAlternativesList = function() {
  return this.setAlternativesList([]);
};


/**
 * optional bool is_final = 2;
 * @return {boolean}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionResult} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 channel_tag = 5;
 * @return {number}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.getChannelTag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionResult} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.setChannelTag = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float audio_processed = 6;
 * @return {number}
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.getAudioProcessed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ilsp.spmd.asr.StreamingRecognitionResult} returns this
 */
proto.ilsp.spmd.asr.StreamingRecognitionResult.prototype.setAudioProcessed = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.ilsp.spmd.asr.AudioEncoding = {
  ENCODING_UNSPECIFIED: 0,
  LINEAR_PCM: 1,
  FLAC: 2,
  MULAW: 3,
  ALAW: 20
};

goog.object.extend(exports, proto.ilsp.spmd.asr);
